#ifndef __HLRU_STRUCTS_H__
#define __HLRU_STRUCTS_H__

#define H2OPUS_LRU_NOT_DONE 0
#define H2OPUS_LRU_DONE 1

template <int hw> struct TLowRankUpdate
{
    typedef typename VectorContainer<hw, H2Opus_Real *>::type RealPointerArray;
    typedef typename VectorContainer<hw, int>::type IntVector;

    // The updates to the blocks in hnode_indexes
    RealPointerArray U, V;
    IntVector hnode_indexes;

    // The level we're updating, the number of updates and the leading dimension of the update
    int level, num_updates, ldu, ldv;

    // The rank of the update, the total rank
    int applied_rank, total_rank, max_rank, rank_per_update;

    // Temporary data used by the algorithm
    // The submatrices generated by the downsweep on the basis trees
    IntVector u_basis_update_index, u_basis_update_row;
    IntVector v_basis_update_index, v_basis_update_row;
    // Flagging the hnodes for updating
    IntVector hnode_update_index;

    TLowRankUpdate(){};

    void init(int n, int level, int max_rank, int num_updates)
    {
        this->level = level;
        this->max_rank = max_rank;
        this->num_updates = num_updates;
        this->ldu = this->ldv = n;

        resizeThrustArray(U, num_updates);
        resizeThrustArray(V, num_updates);
        resizeThrustArray(hnode_indexes, num_updates);
    }

    void setRank(int rank)
    {
        assert(rank <= max_rank);

        this->applied_rank = 0;
        this->total_rank = rank;

        setRankPerUpdate(rank);
    }

    void setRankPerUpdate(int rank)
    {
        rank_per_update = rank;
        if (rank_per_update > total_rank)
            rank_per_update = total_rank;
    }
};

template <int hw> struct TDenseBlockUpdate
{
    typedef typename VectorContainer<hw, H2Opus_Real *>::type RealPointerArray;
    typedef typename VectorContainer<hw, int>::type IntVector;

    // The updates to the blocks in hnode_indexes
    RealPointerArray M;
    IntVector hnode_indexes;

    int block_dim, num_updates, update_ld;

    TDenseBlockUpdate(){};

    void init(int block_dim, int num_updates, int ld)
    {
        this->block_dim = block_dim;
        this->num_updates = num_updates;
        this->update_ld = ld;

        resizeThrustArray(M, num_updates);
        resizeThrustArray(hnode_indexes, num_updates);
    }
};

typedef TLowRankUpdate<H2OPUS_HWTYPE_CPU> LowRankUpdate;
typedef TDenseBlockUpdate<H2OPUS_HWTYPE_CPU> DenseBlockUpdate;

#ifdef H2OPUS_USE_GPU
typedef TLowRankUpdate<H2OPUS_HWTYPE_GPU> LowRankUpdate_GPU;
typedef TDenseBlockUpdate<H2OPUS_HWTYPE_GPU> DenseBlockUpdate_GPU;
#endif

#endif
